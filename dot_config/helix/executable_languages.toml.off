[[language]]
name = "vue"
file-types = ['vue']
formatter = { command = 'prettier', args = ["--parser", "vue"] }
roots = ["package.json", "vite.config.js"]
injection-regex = "vue"
auto-format = true
scope = "text.html.vue"
language-servers = [ { name = "volar", except-features = ["format"] }, "eslint"]
indent = { tab-width = 2, unit = "  " }

[language.debugger]
name = "node"
transport = "stdio"
command = "/usr/bin/node"
args = ["/home/vanarok/.local/bin/vscode-chrome-debug/out/src/chromeDebug.js"]
quirks = { absolute-paths = true }

[[language.debugger.templates]]
name = "source"
request = "attach"
completion = [{ name = "main", completion = "filename", default = "index.js" }]
args = { type = "chrome", program = "{0}", sourceMaps = true, protocol = "inspector", port = '9222', webRoot = "${workspaceFolder}" }

[[grammar]]
name = "vue"
source = { git = "https://github.com/ikatyang/tree-sitter-vue", rev = "91fe2754796cd8fba5f229505a23fa08f3546c06" }

[language-server.volar]
args = ["--stdio"]
command = "vue-language-server"

[language-server.volar.config.typescript]
tsdk = '/lib/node_modules/typescript/lib'

[language-server.volar.config.languageFeatures]
semanticTokens = true
references = true
definition = true
typeDefinition = true
callHierarchy = true
hover = true
rename = true
renameFileRefactoring = true
signatureHelp = true
codeAction = true
completion = { defaultTagNameCase = 'both', defaultAttrNameCase = 'kebabCase' }
schemaRequestService = true
documentHighlight = true
documentLink = true
codeLens = true
diagnostics = true
takeOverMode = true

[language-server.volar.config.documentFeatures]
documentColor = false
selectionRange = true
foldingRange = true
linkedEditingRange = true
documentSymbol = true
documentFormatting = { defaultPrintWidth = 100 }

[language-server.prettier]
command = "efm-langserver"

[language-server.prettier.config]
documentFormatting = true

[language-server.prettier.config.languages]
vue = [{ formatCommand = "prettierd '${INPUT}'", formatStdin = true }]

[language-server.eslint]
args = ["--stdio"]
command = "vscode-eslint-language-server"

[language-server.eslint.config]
problems = { shortenToSingleLine = false }
format = true
nodePath = ""
onIgnoredFiles = "off"
packageManager = "pnpm"
quiet = false
rulesCustomizations = []
run = "onType"
useESLintClass = false
validate = "on"
autoFixOnSave = true

[language-server.eslint.config.experimental]
useFlatConfig = false

[language-server.eslint.config.codeAction]
[language-server.eslint.config.codeAction.disableRuleComment]
enable = true
location = "separateLine"

[language-server.eslint.config.codeAction.showDocumentation]
enable = true

[language-server.eslint.config.codeActionOnSave]
enable = true
mode = "all"

[language-server.eslint.config.workingDirectory]
mode = "auto"

[[language]]
name = "html"
file-types = ['html']
formatter = { command = 'prettier', args = ["--parser", "html"] }
auto-format = true

[[language]]
name = "json"
formatter = { command = 'prettier', args = ["--parser", "json"] }
auto-format = true

[[language]]
name = "css"
formatter = { command = 'prettier', args = ["--parser", "css"] }
auto-format = true
scope = "source.css"
injection-regex = "css"
file-types = ["css", "scss"]
roots = []
language-servers = [{ name = "stylelint" }]
indent = { tab-width = 2, unit = "  " }

[language-server.stylelint]
command = "efm-langserver"

[language-server.stylelint.config]
documentFormatting = true

[language-server.stylelint.config.languages]
css = [
  { lintCommand = "stylelint --stdin --stdin-filename '${INPUT}' --formatter compact", lintStdin = true, lintIgnoreExitCode = true, lintFormats = [
    '%f: line %l, col %c, %tarning - %m',
    '%f: line %l, col %c, %trror - %m',
  ] },
  { formatCommand = "stylelint --fix --stdin --stdin-filename '${INPUT}'", formatStdin = true },
]


[[language]]
name = "typescript"
file-types = ['js','ts', 'cjs', 'mjs']
roots = ["package.json", "vite.config.js"]
formatter = { command = 'prettier', args = ["--parser", "typescript"] }
language-servers = [{ name = "volar", except-features = ["format"] }, "eslint"]
auto-format = true

[[language]]
name = "toml"
scope = "source.toml"
injection-regex = "toml"
file-types = ["toml"]
roots = []
comment-token = "#"
auto-format = true
language-servers = [{ name = "taplo" }]
indent = { tab-width = 2, unit = "  " }

[language-server.taplo]
args = ["lsp", "stdio"]
command = "taplo"

[[language]]
name = "nunjucks"
scope = "text.html.nunjucks"
injection-regex = "nunjucks"
file-types = ["njk"]
roots = []
indent = { tab-width = 2, unit = "  " }
grammar = "jinja2"

[[language]]
name = "jinja"
scope = "text.html.jinja"
injection-regex = "jinja"
file-types = ["jinja", "jinja2", "j2"]
roots = []
indent = { tab-width = 2, unit = "  " }
grammar = "jinja2"

[[grammar]]
name = "jinja2"
source = { git = "https://github.com/varpeti/tree-sitter-jinja2", rev = "a533cd3c33aea6acb0f9bf9a56f35dcfe6a8eb53" }

[[language]]
name = "webc"
scope = "text.html.webc"
injection-regex = "webc"
file-types = ["webc"]
roots = []
language-servers = [ "vscode-html-language-server" ]
formatter = { command = 'prettier', args = ["--parser", "html"] }
auto-format = true
indent = { tab-width = 2, unit = "  " }
grammar = "html"