[[language]]
name = "vue"
file-types = ['vue']
roots = ["package.json", "vite.config.js"]
injection-regex = "vue"
auto-format = true
scope = "text.html.vue"
language-servers = [ { name = "volar", except-features = ["format"] }, "efm"]
indent = { tab-width = 2, unit = "  " }

[[grammar]]
name = "vue"
source = { git = "https://github.com/ikatyang/tree-sitter-vue", rev = "91fe2754796cd8fba5f229505a23fa08f3546c06" }

[language-server.volar]
args = ["--stdio"]
command = "vue-language-server"

[language-server.volar.config.typescript]
tsdk = "/data/data/com.termux/files/home/.local/share/pnpm/global/5/node_modules/typescript/lib"

[language-server.volar.config.languageFeatures]
semanticTokens = true
references = true
definition = true
typeDefinition = true
callHierarchy = true
hover = true
rename = true
renameFileRefactoring = true
signatureHelp = true
codeAction = true
completion = { defaultTagNameCase = 'both', defaultAttrNameCase = 'kebabCase' }
schemaRequestService = true
documentHighlight = true
documentLink = true
codeLens = true
diagnostics = true
takeOverMode = true

[language-server.volar.config.documentFeatures]
documentColor = false
selectionRange = true
foldingRange = true
linkedEditingRange = true
documentSymbol = true
documentFormatting = { defaultPrintWidth = 100 }

[[language]]
name = "html"
file-types = ["html"]
language-servers = ["efm","vscode-html-language-server"]
auto-format = true

[[language]]
name = "json"
file-types = ['json']
formatter = { command = 'eslint_d', args = ["--stdin", "--fix-to-stdout", "--stdin-filename=file.json"] }
language-servers = ["vscode-json-language-server", "efm"]
auto-format = true

[[language]]
name = "css"
scope = "source.css"
injection-regex = "css"
file-types = ["css", "scss"]
roots = []
language-servers = ["efm", "vscode-css-language-server"]
indent = { tab-width = 2, unit = "  " }
auto-format = true

[language-server.efm]
command = "efm-langserver"

[language-server.efm.config]
documentFormatting = true

[language-server.efm.config.languages]
css = [
  { lintCommand = "stylelint --stdin --stdin-filename '${INPUT}' --formatter compact", lintStdin = true, lintIgnoreExitCode = true, lintFormats = [
    '%f: line %l, col %c, %tarning - %m',
    '%f: line %l, col %c, %trror - %m',
  ] },
  { formatCommand = "stylelint --fix --stdin --stdin-filename '${INPUT}'", formatStdin = true },
]
vue = [
  { lintCommand = "eslint_d -f visualstudio --stdin --stdin-filename ${INPUT}", lintStdin = true, lintIgnoreExitCode = true, lintFormats = [
    "%f(%l,%c): %tarning %m",
    "%f(%l,%c): %rror %m",
  ] },
  { formatCommand = "eslint_d -f visualstudio --stdin --stdin-filename ${INPUT} --fix-to-stdout", formatStdin = true },
]
typescript = [
  { lintCommand = "eslint_d -f visualstudio --stdin --stdin-filename ${INPUT}", lintStdin = true, lintIgnoreExitCode = true, lintFormats = [
    "%f(%l,%c): %tarning %m",
    "%f(%l,%c): %rror %m",
  ] },
  { formatCommand = "eslint_d -f visualstudio --stdin --stdin-filename ${INPUT} --fix-to-stdout", formatStdin = true },
]
json = [
  { lintCommand = "eslint_d -f visualstudio --stdin --stdin-filename ${INPUT}", lintStdin = true, lintIgnoreExitCode = true, lintFormats = [
    "%f(%l,%c): %tarning %m",
    "%f(%l,%c): %rror %m",
  ] },
  { formatCommand = "eslint_d -f visualstudio --stdin --stdin-filename ${INPUT} --fix-to-stdout", formatStdin = true },
]
yml = [
  { lintCommand = "eslint_d -f visualstudio --stdin --stdin-filename ${INPUT}", lintStdin = true, lintIgnoreExitCode = true, lintFormats = [
    "%f(%l,%c): %tarning %m",
    "%f(%l,%c): %rror %m",
  ] },
  { formatCommand = "eslint_d -f visualstudio --stdin --stdin-filename ${INPUT} --fix-to-stdout", formatStdin = true },
]
html = [{ formatCommand = "prettierd '${INPUT}'", formatStdin = true }]

[[language]]
name = "typescript"
file-types = ['js','ts', 'cjs', 'mjs']
roots = ["package.json", "vite.config.js"]
language-servers = [{ name = "volar", except-features = ["format"] }, "efm"]
auto-format = true

[[language]]
name = "toml"
scope = "source.toml"
injection-regex = "toml"
file-types = ["toml"]
roots = []
comment-token = "#"
auto-format = true
language-servers = ["taplo"]
indent = { tab-width = 2, unit = "  " }

[language-server.taplo]
args = ["lsp", "stdio"]
command = "taplo"
